var utils = require('../utils.js');

var context = utils.loadSolution();
var solution = context.solution;

var correctCt = 0;
var wrongCt = 0;
var slnAverages = [];

// This will run the the solution and save the results.
function test(input, expected) {
    const NS_PER_SEC = 1e9;
    var solutionTimes = [];
    var iteration = 100;
    var i = 0;
    var t0, t1;
    var tmp;

    tmp = input.slice(0);
    var result = solution(tmp);

    console.log('Input: [' + input + ']');

    if (result === expected) {
        correctCt++;
        console.log('Expected: %s; Result: \x1b[32m%s\x1b[0m', expected, result);

        // Run solution function to get runtimes
        i = 0;
        for (; i < iteration; i++) {
            tmp = input.slice(0);
            t0 = process.hrtime();
            solution(tmp);
            t1 = process.hrtime(t0);
            solutionTimes.push(t1[0] * NS_PER_SEC + t1[1]);
        }

        var slnStat = utils.getStats(solutionTimes);
        slnAverages.push(slnStat.avg);
        utils.printStats(slnStat, 'Size ' + input.length);
    } else {
        wrongCt++;
        console.log('Expected: %s; Result: \x1b[31m%s\x1b[0m', expected, result);
    }
    console.log();
}

/**********
 * Test scenarios from problem examples
 ***********/
test([2, -1, 1, 2, 2], true); // 0 -> 2 -> 3 -> 0
test([-1, 2], false);

/**********
 * Test other different scenarios
 ***********/
test([-9], false);
test([10, 9], false);
test([9, 9], true); // 0 -> 1 -> 0
test([10, -2, 7], false);
test([8, -6, 1, 9], false);
test([8, -5, -1, -5, -6], false);
test([7, 2, -7, 2, 2, 2], true); // 0 -> 1 -> 3 -> 5 -> 1
test([-5, -2, -7, 9, -4, -8, 6], false);
test([-1, 4, 6, 3, 8, 3, 7, 6], false);
test([-5, 5, 5, 2, -4, 8, -4, 3, 9], true); // 0 -> 4 -> 0
test([7, -1, -9, 10, -7, -9, -2, 5, 4, -4], false);
test([7, 1, 1, 1, 5, 9, 4, 8, -10, 4, 7], true); // 0 -> 7 -> 4 -> 9 -> 2 -> 3 -> 4
test([4, -4, 7, 5, 1, -9, 10, -4, -7, -8, 5, -7], true); // 1 -> 9 -> 1
test([-6, -9, -3, -6, -6, -2, 8, -2, 4, 9, -7, 8, 2], true); // 0 -> 7 -> 5 -> 3 -> 10 -> 3
test([9, 5, -6, 7, 3, -7, 7, -5, -10, -3, 8, 1, 3, -6], false);
test([-5, 6, 9, 9, -9, 8, 2, -3, 7, 6, 10, -2, -5, 9, 1], false);
test([-7, -2, 5, 7, 9, 6, -6, -2, -10, 2, 1, -1, 8, 6, 8, 3], false);
test([-5, 8, -10, -8, -3, -9, 5, -1, -10, 1, -7, -7, 8, 1, 1, 6, 1], false);
test([-2, -8, -8, 9, -7, 1, -4, 2, -2, 9, 8, -2, -1, 10, -9, -2, 9, -6], false);
test([-8, -6, -5, 2, -7, -2, -4, -9, -3, 6, 2, -4, 4, -4, 2, -8, -1, 10, -4], false);
test([-4, -3, -4, 1, 3, 10, 7, 10, -7, -5], true); // 1 -> 8 -> 1
test([10], false);
test([-1, -6], false);
test([-5, -6, 2], false);
test([-7, -5, -1, -3], true); // 0 -> 1 -> 0
test([-5, -7, 7, -9, -6], true); // 1 -> 4 -> 3 -> 4
test([6, 2, 3, -7, -4, 1], false);
test([-1, -10, -8, 3, -10, -8, 8], true); // 1 -> 5 -> 4 -> 1
test([-3, 3, -3, -4, -7, -8, -1, 9], false);
test([-1, -4, -6, -1, -2, 6, 7, -8, 8], false);
test([4, 9, 5, -9, 8, -7, -1, 5, 5, 8], true); // 0 -> 4 -> 2 -> 7 -> 2
test([-9, 4, 9, -5, 5, -4, -8, -1, -9, -9, 3], false);
test([8, -6, -9, -5, -1, -8, 5, 2, -5, -6, -2, -1], true); // 2 -> 5 -> 9 -> 3 -> 10 -> 8 -> 3
test([10, -3, -3, 8, -10, 4, 9, 9, 3, 2, 3, -5, -9], true); // 0 -> 10 -> 0
test([-9, -7, 5, 5, 4, -9, -3, 10, -7, 1, 9, -4, 10, 9], true); // 1 -> 8 -> 1
test([-9, 2, -3, 4, -9, 6, 3, -4, 6, 3, 6, -7, 6, 10, -4], false);
test([5, -3, -6, 9, -1, 6, -6, 8, 3, 5, -6, 7, -8, -3, -10, -7], false);
test([-8, -4, 1, 7, -9, -8, -6, 2, -4, -3, -8, -9, -9, 3, 8, 3, 1], true); // 0 -> 9 -> 6 -> 0
test([-1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2], false);
test([2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3], false);
test([-3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3], false);
test([3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6], false);
test([6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4], false);
test([-4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3], false);
test([3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5], false);
test([5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1], false);
test([1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2, 9], false);
test([9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6, 2], false);
test([2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1, 6], false);
test([6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1, 1], false);
test([1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7, -1], false);
test([-1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5, -7], false);
test([-7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9, 5], false);
test([5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5, 9], false);
test([9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10, -5], false);
test([-5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1, 10], false);
test([10, -5, 9, 5, -7, -1, 1, 6, 2, 9, 1, 5, 3, -4, 6, 3, -3, 2, -1], false);

test([-7, -6, 9, 9, -7, -7, -6, 3, 10, 1, -6, 10, -5, 7, -4, -5, -4, -7], true); // 4 -> 15 -> 10 -> 4
test([-7, -7, -6, 9, 9, -7, -7, -6, 3, 10, 1, -6, 10, -5, 7, -4, -5, -4], true); // 0 -> 11 -> 5 -> 16 -> 11
test([-4, -7, -7, -6, 9, 9, -7, -7, -6, 3, 10, 1, -6, 10, -5, 7, -4, -5], true); // 1 -> 12 -> 6 -> 17 -> 12
test([-5, -4, -7, -7, -6, 9, 9, -7, -7, -6, 3, 10, 1, -6, 10, -5, 7, -4], true); // 0 -> 13 -> 7 -> 0
test([-4, -5, -4, -7, -7, -6, 9, 9, -7, -7, -6, 3, 10, 1, -6, 10, -5, 7], true); // 0 -> 14 -> 8 -> 1 -> 14
test([7, -4, -5, -4, -7, -7, -6, 9, 9, -7, -7, -6, 3, 10, 1, -6, 10, -5], true); // 1 -> 15 -> 9 -> 2 -> 15
test([-5, 7, -4, -5, -4, -7, -7, -6, 9, 9, -7, -7, -6, 3, 10, 1, -6, 10], true); // 2 -> 16 -> 10 -> 3 -> 16
test([10, -5, 7, -4, -5, -4, -7, -7, -6, 9, 9, -7, -7, -6, 3, 10, 1, -6], true); // 3 -> 17 -> 11 -> 4 -> 17
test([-6, 10, -5, 7, -4, -5, -4, -7, -7, -6, 9, 9, -7, -7, -6, 3, 10, 1], true); // 0 -> 12 -> 5 -> 0
test([1, -6, 10, -5, 7, -4, -5, -4, -7, -7, -6, 9, 9, -7, -7, -6, 3, 10], true); // 1 -> 13 -> 6 -> 1
test([10, 1, -6, 10, -5, 7, -4, -5, -4, -7, -7, -6, 9, 9, -7, -7, -6, 3], true); // 2 -> 14 -> 7 -> 2
test([3, 10, 1, -6, 10, -5, 7, -4, -5, -4, -7, -7, -6, 9, 9, -7, -7, -6], true); // 3 -> 15 -> 8 -> 3
test([-6, 3, 10, 1, -6, 10, -5, 7, -4, -5, -4, -7, -7, -6, 9, 9, -7, -7], true); // 4 -> 16 -> 9 -> 4
test([-7, -6, 3, 10, 1, -6, 10, -5, 7, -4, -5, -4, -7, -7, -6, 9, 9, -7], true); // 5 -> 17 -> 10 -> 5
test([-7, -7, -6, 3, 10, 1, -6, 10, -5, 7, -4, -5, -4, -7, -7, -6, 9, 9], true); // 0 -> 11 -> 6 -> 0
test([9, -7, -7, -6, 3, 10, 1, -6, 10, -5, 7, -4, -5, -4, -7, -7, -6, 9], true); // 1 -> 12 -> 7 -> 1
test([9, 9, -7, -7, -6, 3, 10, 1, -6, 10, -5, 7, -4, -5, -4, -7, -7, -6], true); // 2 -> 13 -> 8 -> 2
test([-6, 9, 9, -7, -7, -6, 3, 10, 1, -6, 10, -5, 7, -4, -5, -4, -7, -7], true); // 3 -> 14 -> 9 -> 3

console.log('============ Summary =============');
console.log('Passed: ' + correctCt);
console.log('Failed: ' + wrongCt);
// Get stats then print comparison
var slnAvgStat = utils.getStats(slnAverages);

utils.printStats(slnAvgStat, 'Solution Averages');
